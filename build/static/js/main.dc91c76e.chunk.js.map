{"version":3,"sources":["BooksAPI.js","SearchBooks.js","BooksList.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","concat","then","res","json","data","book","getAll","books","update","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","SearchBooks","state","shelfType","handleSearch","e","console","log","target","value","_this","props","onSearchBook","handleChange","persist","BooksAPI","onUpdateBook","_this2","this","_this$props","allBooks","map","react_default","a","createElement","className","react_router_dom","to","onChange","type","name","placeholder","key","style","width","height","backgroundImage","imageLinks","smallThumbnail","onSubmit","handleCategory","defaultValue","disabled","title","undefined","authors","Component","BooksList","wantToRead","read","currentlyReading","BooksApp","showSearchPage","setState","updateBooks","c","curr","filter","want","red","_this3","react_router","path","render","_ref","history","src_SearchBooks","push","exact","src_BooksList","React","ReactDOM","src_App","document","getElementById"],"mappings":"8PACMA,EAAM,wCAIRC,EAAQC,aAAaD,MACpBA,IACHA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAElE,IAAMC,EAAU,CACdC,OAAU,mBACVC,cAAiBR,GAGNS,EAAM,SAACC,GAAD,OACjBC,MAAK,GAAAC,OAAIb,EAAJ,WAAAa,OAAiBF,GAAU,CAAEJ,YAC/BO,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKC,QAEVC,EAAS,kBACpBP,MAAK,GAAAC,OAAIb,EAAJ,UAAiB,CAAEO,YACrBO,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKG,SAEVC,EAAS,SAACH,EAAMI,GAAP,OACpBV,MAAK,GAAAC,OAAIb,EAAJ,WAAAa,OAAiBK,EAAKK,IAAM,CAC/BC,OAAQ,MACRjB,QAAQkB,OAAAC,EAAA,EAAAD,CAAA,GACHlB,EADE,CAELoB,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAER,YACtBR,KAAK,SAAAC,GAAG,OAAIA,EAAIC,UAERe,EAAS,SAACC,GAAD,OACpBpB,MAAK,GAAAC,OAAIb,EAAJ,WAAkB,CACrBwB,OAAQ,OACRjB,QAAQkB,OAAAC,EAAA,EAAAD,CAAA,GACHlB,EADE,CAELoB,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEE,YACtBlB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKG,wCCqDRa,6MAxFXC,MAAQ,CACJC,UAAY,MAGhBC,aAAe,SAACC,GACdC,QAAQC,IAAIF,EAAEG,OAAOC,OAEhBC,EAAKC,MAAMC,cACRF,EAAKC,MAAMC,aAAaP,EAAEG,OAAOC,UAK3CI,aAAe,SAACR,GACZA,EAAES,UACFC,EAAaV,EAAEG,OAAF,MACZ1B,KAAK,SAACI,GACHoB,QAAQC,IAAIF,EAAEG,OAAOC,OAClBC,EAAKC,MAAMK,cACVN,EAAKC,MAAMK,aAAa9B,EAAMmB,EAAEG,OAAOC,kFAK1C,IAAAQ,EAAAC,KACGf,EAAce,KAAKhB,MAAnBC,UADHgB,EAEuBD,KAAKP,MAAzBvB,EAFH+B,EAEG/B,MAMR,OARK+B,EAEUC,SAENC,IAAI,SAACnC,GAAD,OACTiB,EAAUjB,EAAKK,IAAML,EAAKI,QAI9BgC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,IAAIF,UAAU,gBAAvB,SACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAUXH,EAAAC,EAAAC,cAAA,SAAQI,SAAUV,KAAKd,aAAcyB,KAAK,OAAOC,KAAK,OAAOC,YAAY,gCAI/ET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACTrC,EAAMiC,IAAI,SAACnC,GAAD,OACPoC,EAAAC,EAAAC,cAAA,MAAIQ,IAAK9C,EAAKK,IACZ+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaQ,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,gBAAe,OAAAvD,OAASK,EAAKmD,WAAWC,eAAzB,QAC7EhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACfH,EAAAC,EAAAC,cAAA,QAAMe,SAAUtB,EAAKuB,gBAEnBlB,EAAAC,EAAAC,cAAA,UAAQM,KAAM5C,EAAKK,GAAIqC,SAAUX,EAAKJ,aAAc4B,aAAetC,EAAUjB,EAAKK,IAAMY,EAAUjB,EAAKK,IAAK,QAC1G+B,EAAAC,EAAAC,cAAA,UAAQf,MAAM,OAAOiC,UAAQ,GAA7B,cACApB,EAAAC,EAAAC,cAAA,UAAQf,MAAM,oBAAd,qBACAa,EAAAC,EAAAC,cAAA,UAAQf,MAAM,cAAd,gBACAa,EAAAC,EAAAC,cAAA,UAAQf,MAAM,QAAd,QACAa,EAAAC,EAAAC,cAAA,UAAQf,MAAM,QAAd,YAKNa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcvC,EAAKyD,YAEhBC,IAAjB1D,EAAK2D,SACFvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBvC,EAAK2D,QAAQxE,0BA1E9CyE,aC6IXC,6MA1IXlC,aAAe,SAACR,GACZA,EAAES,UACFR,QAAQC,IAAIF,EAAEG,OAAOC,OACrBH,QAAQC,IAAIF,EAAEG,OAAF,MACZO,EAAaV,EAAEG,OAAF,MACZ1B,KAAK,SAACI,GACHoB,QAAQC,IAAIF,EAAEG,OAAOC,OAClBC,EAAKC,MAAMK,cACVN,EAAKC,MAAMK,aAAa9B,EAAMmB,EAAEG,OAAOC,kFAI1C,IAAAQ,EAAAC,KAAAC,EAEmDD,KAAKP,MAA3CqC,GAFb7B,EAEGC,SAFHD,EAEa6B,YAAYC,EAFzB9B,EAEyB8B,KAAMC,EAF/B/B,EAE+B+B,iBACpC,OACI5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,qBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACbyB,EAAiB7B,IAAI,SAACnC,GAAD,OAClBoC,EAAAC,EAAAC,cAAA,MAAIQ,IAAK9C,EAAKK,IACZ+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaQ,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,gBAAe,OAAAvD,OAASK,EAAKmD,WAAWC,eAAzB,QAC7EhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACfH,EAAAC,EAAAC,cAAA,QAAMe,SAAUtB,EAAKuB,gBACnBlB,EAAAC,EAAAC,cAAA,UAAQM,KAAM5C,EAAKK,GAAIqC,SAAUX,EAAKJ,aAAc4B,aAAa,oBAC/DnB,EAAAC,EAAAC,cAAA,UAAQf,MAAM,OAAOiC,UAAQ,GAA7B,cACApB,EAAAC,EAAAC,cAAA,UAAQf,MAAM,oBAAd,qBACAa,EAAAC,EAAAC,cAAA,UAAQf,MAAM,cAAd,gBACAa,EAAAC,EAAAC,cAAA,UAAQf,MAAM,QAAd,QACAa,EAAAC,EAAAC,cAAA,UAAQf,MAAM,QAAd,YAKNa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcvC,EAAKyD,YAEhBC,IAAjB1D,EAAK2D,SACFvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBvC,EAAK2D,QAAQxE,mBAW5DiD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACbuB,EAAW3B,IAAI,SAACnC,GAAD,OACZoC,EAAAC,EAAAC,cAAA,MAAIQ,IAAK9C,EAAKK,IACZ+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaQ,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,gBAAe,OAAAvD,OAASK,EAAKmD,WAAWC,eAAzB,QAC7EhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACfH,EAAAC,EAAAC,cAAA,QAAMe,SAAUtB,EAAKuB,gBACnBlB,EAAAC,EAAAC,cAAA,UAAQM,KAAM5C,EAAKK,GAAIqC,SAAUX,EAAKJ,aAAc4B,aAAa,cAC/DnB,EAAAC,EAAAC,cAAA,UAAQf,MAAM,OAAOiC,UAAQ,GAA7B,cACApB,EAAAC,EAAAC,cAAA,UAAQf,MAAM,oBAAd,qBACAa,EAAAC,EAAAC,cAAA,UAAQf,MAAM,cAAd,gBACAa,EAAAC,EAAAC,cAAA,UAAQf,MAAM,QAAd,QACAa,EAAAC,EAAAC,cAAA,UAAQf,MAAM,QAAd,YAKNa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcvC,EAAKyD,YAEhBC,IAAjB1D,EAAK2D,SACFvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBvC,EAAK2D,QAAQxE,mBAW5DiD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,QACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACbwB,EAAK5B,IAAI,SAACnC,GAAD,OACNoC,EAAAC,EAAAC,cAAA,MAAIQ,IAAK9C,EAAKK,IACZ+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaQ,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,gBAAe,OAAAvD,OAASK,EAAKmD,WAAWC,eAAzB,QAC7EhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACfH,EAAAC,EAAAC,cAAA,QAAMe,SAAUtB,EAAKuB,gBACnBlB,EAAAC,EAAAC,cAAA,UAAQM,KAAM5C,EAAKK,GAAIqC,SAAUX,EAAKJ,aAAc4B,aAAa,QAC/DnB,EAAAC,EAAAC,cAAA,UAAQf,MAAM,OAAOiC,UAAQ,GAA7B,cACApB,EAAAC,EAAAC,cAAA,UAAQf,MAAM,oBAAd,qBACAa,EAAAC,EAAAC,cAAA,UAAQf,MAAM,cAAd,gBACAa,EAAAC,EAAAC,cAAA,UAAQf,MAAM,QAAd,QACAa,EAAAC,EAAAC,cAAA,UAAQf,MAAM,QAAd,YAKNa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcvC,EAAKyD,YAEhBC,IAAjB1D,EAAK2D,SACFvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBvC,EAAK2D,QAAQxE,qBAahEiD,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,cAAcE,GAAG,WAAjC,sBAnIUmB,aCkHTK,6MAhHbjD,MAAQ,CAONkD,gBAAgB,EAChBhE,MAAO,GACP8D,iBAAkB,GAClBF,WAAY,GACZC,KAAM,GACN7B,SAAU,MAIZnB,YAAc,SAACf,GACb6B,EAAgB7B,GACfJ,KAAK,SAACI,GAEHwB,EAAK2C,SAAS,CACVjE,MAAOF,SAMjBoE,YAAc,SAACpE,EAAMI,GACnByB,EAAgB7B,EAAMI,GACrBR,KAAK,SAACyE,GACHxC,IACCjC,KAAK,SAACsC,GAEH,IAAIoC,EAAOpC,EAASqC,OAAO,SAACvE,GAAD,MACR,qBAAfA,EAAKI,QAELoE,EAAOtC,EAASqC,OAAO,SAACvE,GAAD,MACR,eAAfA,EAAKI,QAELqE,EAAMvC,EAASqC,OAAO,SAACvE,GAAD,MACP,SAAfA,EAAKI,QAEToB,EAAK2C,SAAS,CACVjC,SAAUA,EACV8B,iBAAkBM,EAClBR,WAAYU,EACZT,KAAMU,4FAQD,IAAA1C,EAAAC,KACjBH,IACCjC,KAAK,SAACsC,GACHd,QAAQC,IAAIa,GACZ,IAAIoC,EAAOpC,EAASqC,OAAO,SAACvE,GAAD,MACR,qBAAfA,EAAKI,QAELoE,EAAOtC,EAASqC,OAAO,SAACvE,GAAD,MACR,eAAfA,EAAKI,QAELqE,EAAMvC,EAASqC,OAAO,SAACvE,GAAD,MACP,SAAfA,EAAKI,QAET2B,EAAKoC,SAAS,CACVjC,SAAUA,EACV8B,iBAAkBM,EAClBR,WAAYU,EACZT,KAAMU,uCAOP,IAAAC,EAAA1C,KAEP,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAOC,KAAK,UAAUC,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAAH,OAC1B3C,EAAAC,EAAAC,cAAC0C,EAAD,CACI9E,MAAOwE,EAAK1D,MAAMd,MAClBgC,SAAUwC,EAAK1D,MAAMkB,SACrBR,aAAc,SAAC1B,GACX0E,EAAK3D,YAAYf,IAErB8B,aAAc,SAAC9B,EAAMI,GACjBsE,EAAKN,YAAYpE,EAAMI,GACvB2E,EAAQE,KAAK,WAIzB7C,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAOO,OAAK,EAACN,KAAK,IAAIC,OAAQ,kBAC1BzC,EAAAC,EAAAC,cAAC6C,EAAD,CACIjD,SAAUwC,EAAK1D,MAAMkB,SACrB8B,iBAAkBU,EAAK1D,MAAMgD,iBAC7BF,WAAYY,EAAK1D,MAAM8C,WACvBC,KAAMW,EAAK1D,MAAM+C,KACjBjC,aAAc,SAAC9B,EAAMI,GACjBsE,EAAKN,YAAYpE,EAAMI,iBAvGpBgF,IAAMxB,iBCH7ByB,IAASR,OACLzC,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAACgD,EAAD,OACcC,SAASC,eAAe","file":"static/js/main.dc91c76e.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport { Link } from 'react-router-dom'\r\nimport { Route } from 'react-router-dom'\r\nimport serializeForm from 'form-serialize'\r\n\r\nclass SearchBooks extends Component {\r\n    state = {\r\n        shelfType : {}\r\n    }\r\n\r\n    handleSearch = (e) => {\r\n      console.log(e.target.value)\r\n\r\n        if(this.props.onSearchBook) {\r\n              this.props.onSearchBook(e.target.value)\r\n      }\r\n\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        e.persist()\r\n        BooksAPI.get(e.target['name'])\r\n        .then((book) => {\r\n            console.log(e.target.value);\r\n            if(this.props.onUpdateBook) {\r\n                this.props.onUpdateBook(book, e.target.value)\r\n            }\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { shelfType } = this.state\r\n        const { books, allBooks } = this.props\r\n\r\n        allBooks.map((book) => (\r\n            shelfType[book.id] = book.shelf\r\n        ))\r\n\r\n        return(\r\n        <div className=\"search-books\">\r\n          <div className=\"search-books-bar\">\r\n            <Link to=\"/\" className=\"close-search\">Close</Link>\r\n            <div className=\"search-books-input-wrapper\">\r\n              {/*\r\n                NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                You can find these search terms here:\r\n                https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                you don't find a specific author or title. Every search is limited by search terms.\r\n              */}\r\n\r\n                <input  onChange={this.handleSearch} type=\"text\" name='name' placeholder=\"Search by title or author\"/>\r\n\r\n            </div>\r\n          </div>\r\n          <div className=\"search-books-results\">\r\n            <ol className=\"books-grid\">\r\n                {books.map((book) => (\r\n                    <li key={book.id}>\r\n                      <div className=\"book\">\r\n                        <div className=\"book-top\">\r\n                          <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.smallThumbnail})` }}></div>\r\n                          <div className=\"book-shelf-changer\">\r\n                          <form onSubmit={this.handleCategory}>\r\n\r\n                            <select name={book.id} onChange={this.handleChange} defaultValue={(shelfType[book.id] ? shelfType[book.id]: \"none\")}>\r\n                              <option value=\"move\" disabled>Move to...</option>\r\n                              <option value=\"currentlyReading\">Currently Reading</option>\r\n                              <option value=\"wantToRead\">Want to Read</option>\r\n                              <option value=\"read\">Read</option>\r\n                              <option value=\"none\">None</option>\r\n                            </select>\r\n                          </form>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"book-title\">{book.title}</div>\r\n\r\n                        {book.authors !== undefined && (\r\n                            <div className=\"book-authors\">{book.authors.toString()}</div>\r\n                        )}\r\n\r\n\r\n                      </div>\r\n                    </li>\r\n\r\n                ))}\r\n            </ol>\r\n          </div>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default SearchBooks\r\n","import React, { Component } from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport { Link } from 'react-router-dom'\r\nimport { Route } from 'react-router-dom'\r\nimport serializeForm from 'form-serialize'\r\n\r\n\r\nclass BooksList extends Component {\r\n\r\n    handleChange = (e) => {\r\n        e.persist()\r\n        console.log(e.target.value);\r\n        console.log(e.target['name']);\r\n        BooksAPI.get(e.target['name'])\r\n        .then((book) => {\r\n            console.log(e.target.value);\r\n            if(this.props.onUpdateBook) {\r\n                this.props.onUpdateBook(book, e.target.value)\r\n            }\r\n            })\r\n    }\r\n    render() {\r\n        // const { wantToRead, read , currentlyReading} = this.state\r\n        const { allBooks, wantToRead, read, currentlyReading} = this.props\r\n        return(\r\n            <div className=\"list-books\">\r\n              <div className=\"list-books-title\">\r\n                <h1>MyReads</h1>\r\n              </div>\r\n              <div className=\"list-books-content\">\r\n                <div>\r\n                  <div className=\"bookshelf\">\r\n                    <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n                    <div className=\"bookshelf-books\">\r\n                      <ol className=\"books-grid\">\r\n                      {currentlyReading.map((book) => (\r\n                          <li key={book.id}>\r\n                            <div className=\"book\">\r\n                              <div className=\"book-top\">\r\n                                <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.smallThumbnail})` }}></div>\r\n                                <div className=\"book-shelf-changer\">\r\n                                <form onSubmit={this.handleCategory}>\r\n                                  <select name={book.id} onChange={this.handleChange} defaultValue='currentlyReading'>\r\n                                    <option value=\"move\" disabled>Move to...</option>\r\n                                    <option value=\"currentlyReading\">Currently Reading</option>\r\n                                    <option value=\"wantToRead\">Want to Read</option>\r\n                                    <option value=\"read\">Read</option>\r\n                                    <option value=\"none\">None</option>\r\n                                  </select>\r\n                                </form>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"book-title\">{book.title}</div>\r\n\r\n                              {book.authors !== undefined && (\r\n                                  <div className=\"book-authors\">{book.authors.toString()}</div>\r\n                              )}\r\n\r\n\r\n                            </div>\r\n                          </li>\r\n\r\n                      ))}\r\n                      </ol>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"bookshelf\">\r\n                    <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n                    <div className=\"bookshelf-books\">\r\n                      <ol className=\"books-grid\">\r\n                      {wantToRead.map((book) => (\r\n                          <li key={book.id}>\r\n                            <div className=\"book\">\r\n                              <div className=\"book-top\">\r\n                                <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.smallThumbnail})` }}></div>\r\n                                <div className=\"book-shelf-changer\">\r\n                                <form onSubmit={this.handleCategory}>\r\n                                  <select name={book.id} onChange={this.handleChange} defaultValue='wantToRead'>\r\n                                    <option value=\"move\" disabled>Move to...</option>\r\n                                    <option value=\"currentlyReading\">Currently Reading</option>\r\n                                    <option value=\"wantToRead\">Want to Read</option>\r\n                                    <option value=\"read\">Read</option>\r\n                                    <option value=\"none\">None</option>\r\n                                  </select>\r\n                                </form>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"book-title\">{book.title}</div>\r\n\r\n                              {book.authors !== undefined && (\r\n                                  <div className=\"book-authors\">{book.authors.toString()}</div>\r\n                              )}\r\n\r\n\r\n                            </div>\r\n                          </li>\r\n\r\n                      ))}\r\n                      </ol>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"bookshelf\">\r\n                    <h2 className=\"bookshelf-title\">Read</h2>\r\n                    <div className=\"bookshelf-books\">\r\n                      <ol className=\"books-grid\">\r\n                      {read.map((book) => (\r\n                          <li key={book.id}>\r\n                            <div className=\"book\">\r\n                              <div className=\"book-top\">\r\n                                <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.smallThumbnail})` }}></div>\r\n                                <div className=\"book-shelf-changer\">\r\n                                <form onSubmit={this.handleCategory}>\r\n                                  <select name={book.id} onChange={this.handleChange} defaultValue='read'>\r\n                                    <option value=\"move\" disabled>Move to...</option>\r\n                                    <option value=\"currentlyReading\">Currently Reading</option>\r\n                                    <option value=\"wantToRead\">Want to Read</option>\r\n                                    <option value=\"read\">Read</option>\r\n                                    <option value=\"none\">None</option>\r\n                                  </select>\r\n                                </form>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"book-title\">{book.title}</div>\r\n\r\n                              {book.authors !== undefined && (\r\n                                  <div className=\"book-authors\">{book.authors.toString()}</div>\r\n                              )}\r\n\r\n\r\n                            </div>\r\n                          </li>\r\n\r\n                      ))}\r\n                      </ol>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <Link className=\"open-search\" to='/search'>Add a book</Link>\r\n\r\n\r\n              </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default BooksList\r\n","import React from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport { Link } from 'react-router-dom'\nimport { Route } from 'react-router-dom'\nimport serializeForm from 'form-serialize'\nimport SearchBooks from './SearchBooks'\nimport BooksList from './BooksList'\n\nclass BooksApp extends React.Component {\n  state = {\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n    showSearchPage: false,\n    books: [],\n    currentlyReading: [],\n    wantToRead: [],\n    read: [],\n    allBooks: []\n  }\n\n\n  SearchBooks = (book) => {\n    BooksAPI.search(book)\n    .then((book) => {\n\n        this.setState({\n            books: book\n        })\n    })\n  }\n\n\n  updateBooks = (book, shelf) => {\n    BooksAPI.update(book, shelf)\n    .then((c) => {\n        BooksAPI.getAll()\n        .then((allBooks) => {\n\n            let curr = allBooks.filter((book) => (\n                book.shelf === 'currentlyReading'\n            ))\n            let want = allBooks.filter((book) => (\n                book.shelf === 'wantToRead'\n            ))\n            let red = allBooks.filter((book) => (\n                book.shelf === 'read'\n            ))\n            this.setState({\n                allBooks: allBooks,\n                currentlyReading: curr,\n                wantToRead: want,\n                read: red,\n            })\n\n        })\n\n    })\n  }\n\n  componentDidMount(){\n    BooksAPI.getAll()\n    .then((allBooks) => {\n        console.log(allBooks);\n        let curr = allBooks.filter((book) => (\n            book.shelf === 'currentlyReading'\n        ))\n        let want = allBooks.filter((book) => (\n            book.shelf === 'wantToRead'\n        ))\n        let red = allBooks.filter((book) => (\n            book.shelf === 'read'\n        ))\n        this.setState({\n            allBooks: allBooks,\n            currentlyReading: curr,\n            wantToRead: want,\n            read: red,\n        })\n\n    })\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"app\">\n        <Route path='/search' render={({ history }) => (\n            <SearchBooks\n                books={this.state.books}\n                allBooks={this.state.allBooks}\n                onSearchBook={(book) => {\n                    this.SearchBooks(book)\n                }}\n                onUpdateBook={(book, shelf) =>{\n                    this.updateBooks(book, shelf)\n                    history.push('/')\n                }}/>\n        )} />\n\n        <Route exact path='/' render={() => (\n            <BooksList\n                allBooks={this.state.allBooks}\n                currentlyReading={this.state.currentlyReading}\n                wantToRead={this.state.wantToRead}\n                read={this.state.read}\n                onUpdateBook={(book, shelf) =>{\n                    this.updateBooks(book, shelf)\n                }}/>\n        )} />\n\n\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, document.getElementById('root'))\n"],"sourceRoot":""}